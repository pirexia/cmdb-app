<?php
/**
 * app/bootstrap.php
 *
 * Configuración del contenedor de inyección de dependencias (PHP-DI).
 * Este archivo define cómo PHP-DI crea y gestiona las instancias de las clases
 * y sus dependencias a lo largo de toda la aplicación.
 * El orden de las definiciones es CRÍTICO para resolver las dependencias correctamente.
 */

// --- Importaciones de Clases (Ordenadas alfabéticamente por tipo y luego por nombre) ---

// Interfaces PSR (PHP Standard Recommendation)
use Psr\Container\ContainerInterface;
use Psr\Log\LoggerInterface;

// Clases de Librerías de Terceros (Vendors)
use DI\Factory;
use League\Plates\Engine as PlatesEngine;
use Monolog\Formatter\LineFormatter;
use Monolog\Handler\StreamHandler;
use Monolog\Logger;
use PDO;
use PDOException;
use PHPMailer\PHPMailer\Exception as MailerException;
use PHPMailer\PHPMailer\PHPMailer;
use PHPMailer\PHPMailer\SMTP;
use League\Csv\Writer;
use League\Csv\Reader;

// Clases de la Aplicación (App\)
// Controladores
use App\Controllers\AdminController;
use App\Controllers\ApiController;
use App\Controllers\AssetController;
use App\Controllers\AuthController;
use App\Controllers\ContractController;
use App\Controllers\CustomFieldsController;
use App\Controllers\DashboardController;
use App\Controllers\ImportController;
use App\Controllers\LanguageController;
use App\Controllers\LogController;
use App\Controllers\MasterController;
use App\Controllers\ModelController;
use App\Controllers\SmtpController;
use App\Controllers\SourceController;
use App\Controllers\UserController;

// Modelos
use App\Models\AcquisitionFormat;
use App\Models\Asset;
use App\Models\AssetContract;
use App\Models\AssetStatus;
use App\Models\AssetType;
use App\Models\Contract;
use App\Models\ContractType;
use App\Models\CustomFieldDefinition;
use App\Models\CustomFieldValue;
use App\Models\Department;
use App\Models\FileAttachment;
use App\Models\Language;
use App\Models\Location;
use App\Models\Manufacturer;
use App\Models\Model;
use App\Models\PasswordResetToken;
use App\Models\Provider;
use App\Models\Role;
use App\Models\Source;
use App\Models\User;
use App\Models\LogActivo;
use App\Models\SmtpConfig;

// Servicios
use App\Services\AuthService;
use App\Services\CsvImporterService;
use App\Services\CsvTemplateService;
use App\Services\LdapService;
use App\Services\LogService;
use App\Services\MailService;
use App\Services\NotificationService;
use App\Services\SessionService;
use App\Services\SmtpService;


// --- 1. Cargar la Configuración de la Aplicación ---
$config_data = require __DIR__ . '/Config/config.php';
$container->set('config', function () use ($config_data) {
    return $config_data;
});


// --- 2. Definiciones de Servicios Básicos e Infraestructura ---

// 2.1. Conexión a la base de datos (PDO)
$container->set('db', function (ContainerInterface $c) {
    $dbConfig = $c->get('config')['db'];
    $dsn = "mysql:host={$dbConfig['host']};dbname={$dbConfig['name']};charset={$dbConfig['charset']}";
    $options = [
        PDO::ATTR_ERRMODE            => PDO::ERRMODE_EXCEPTION,
        PDO::ATTR_DEFAULT_FETCH_MODE => PDO::FETCH_ASSOC,
        PDO::ATTR_EMULATE_PREPARES   => false,
    ];
    try {
        $pdo = new PDO($dsn, $dbConfig['user'], $dbConfig['pass'], $options);
        return $pdo;
    } catch (PDOException $e) {
        error_log("Error FATAL de conexión a la base de datos: " . $e->getMessage());
        die('Error crítico: Fallo en la conexión a la base de datos. Por favor, contacte al administrador.');
    }
});
$container->set(PDO::class, Factory(function (ContainerInterface $c) {
    return $c->get('db');
}));

// 2.2. Logger (Monolog)
$container->set('logger', function (ContainerInterface $c) {
    $config = $c->get('config');
    $logPath = $config['paths']['logs'] . '/app.log';
    $app_name = $config['app']['name'] ?? 'CMDB_App_Logger';
    $logLevel = $config['app']['env'] === 'development' ? Logger::DEBUG : Logger::INFO;
    $logger = new Logger($app_name);
    $formatter = new LineFormatter(
        "[%datetime%] %channel%.%level_name%: %message% %context% %extra%\\n",
        "Y-m-d H:i:s",
        true,
        true
    );
    $streamHandler = new StreamHandler($logPath, $logLevel);
    $streamHandler->setFormatter($formatter);
    $logger->pushHandler($streamHandler);
    return $logger;
});
$container->set(LoggerInterface::class, Factory(function (ContainerInterface $c) {
    return $c->get('logger');
}));


// 2.3. Servicio de Sesión (SessionService)
$container->set(App\Services\SessionService::class, function (ContainerInterface $c) {
    return new App\Services\SessionService(
        $c->get('config')['session']
    );
});


// 2.4. Traductor (Translator Callable)
$container->set('translator', function (ContainerInterface $c) {
    $langConfig = $c->get('config')['lang'];
    $sessionService = $c->get(App\Services\SessionService::class);
    $defaultLang = $c->get('config')['app']['default_language'] ?? 'es';

    return function (string $key, array $replacements = [], ?string $langCode = null) use ($langConfig, $sessionService, $defaultLang) {
        $currentLang = $langCode ?? $sessionService->getUserLanguage() ?? $defaultLang;
        $translations = [];
        $langFilePath = $langConfig[$currentLang] ?? null;
        if (!$langFilePath || !file_exists($langFilePath)) {
            $langFilePath = $langConfig[$defaultLang];
        }
        if (file_exists($langFilePath)) {
            $translations = require $langFilePath;
        }
        $text = $translations[$key] ?? $key;
        foreach ($replacements as $placeholder => $value) {
            $text = str_replace($placeholder, $value, $text);
        }
        return $text;
    };
});


// 2.5. PHPMailer
$container->set(PHPMailer::class, function (ContainerInterface $c) {
    $smtpConfig = $c->get('config')['smtp'];
    $mail = new PHPMailer(true);
    try {
        $mail->isSMTP();
        $mail->Host       = $smtpConfig['host'];
        $mail->Port       = $smtpConfig['port'];
        $mail->CharSet    = 'UTF-8';
        $mail->SMTPAuth   = $smtpConfig['auth_required'];
        if ($smtpConfig['auth_required']) { $mail->Username = $smtpConfig['username']; $mail->Password = $smtpConfig['password']; }
        if (!empty($smtpConfig['encryption'])) {
            $mail->SMTPSecure = match ($smtpConfig['encryption']) {
                'tls' => PHPMailer::ENCRYPTION_STARTTLS,
                'ssl' => PHPMailer::ENCRYPTION_SMTPS,
                default => false,
            };
        } else { $mail->SMTPSecure = false; }
        $mail->SMTPOptions = ['ssl' => ['verify_peer' => false, 'verify_peer_name' => false, 'allow_self_signed' => true]];
        $mail->setFrom($smtpConfig['from_email'], $smtpConfig['from_name']);
        return $mail;
    } catch (MailerException $e) {
        $c->get('logger')->error("Error al configurar PHPMailer: {$e->getMessage()}");
        return null;
    }
});


// 2.6. Servicio de Plantillas CSV (CsvTemplateService)
$container->set(App\Services\CsvTemplateService::class, function (ContainerInterface $c) {
    return new App\Services\CsvTemplateService(
        $c->get(LoggerInterface::class),
        $c->get('translator'),
        $c->get(App\Models\AssetType::class),
        $c->get(App\Models\CustomFieldDefinition::class)
    );
});


// 2.7. Servicio de Importación CSV (CsvImporterService)
$container->set(App\Services\CsvImporterService::class, function (ContainerInterface $c) {
    return new App\Services\CsvImporterService(
        $c->get(LoggerInterface::class),
        $c->get('translator'),
        $c->get(App\Models\Asset::class),
        $c->get(App\Models\Manufacturer::class),
        $c->get(App\Models\Provider::class),
        $c->get(App\Models\Contract::class),
        $c->get(App\Models\AssetType::class),
        $c->get(App\Models\AssetStatus::class),
        $c->get(App\Models\ContractType::class),
        $c->get(App\Models\Location::class),
        $c->get(App\Models\Department::class),
        $c->get(App\Models\AcquisitionFormat::class),
        $c->get(App\Models\Model::class)
    );
});

// 2.8. Servicio LDAP (LdapService)
$container->set(App\Services\LdapService::class, function (ContainerInterface $c) {
    return new App\Services\LdapService(
        $c->get(LoggerInterface::class),
        $c->get('translator')
    );
});

// 2.9. Servicio de Logs (LogService) <--- ¡NUEVA DEFINICIÓN!
$container->set(App\Services\LogService::class, function (ContainerInterface $c) {
    return new App\Services\LogService(
        $c->get(PDO::class),
        $c->get(LoggerInterface::class)
    );
});

// 2.10. Servicio SMTP (SmtpService) <--- ¡NUEVA DEFINICIÓN!
$container->set(App\Services\SmtpService::class, function (ContainerInterface $c) {
    return new App\Services\SmtpService(
        $c->get('config'),
        $c->get(LoggerInterface::class),
        $c->get('translator'),
        $c->get(PDO::class)
    );
});


// --- 3. Definiciones de Modelos (Dependen de PDO 'db') ---
$container->set(App\Models\AcquisitionFormat::class, function (ContainerInterface $c) { return new App\Models\AcquisitionFormat($c->get(PDO::class)); });
$container->set(App\Models\Asset::class, function (ContainerInterface $c) { return new App\Models\Asset($c->get(PDO::class)); });
$container->set(App\Models\AssetContract::class, function (ContainerInterface $c) { return new App\Models\AssetContract($c->get(PDO::class)); });
$container->set(App\Models\AssetStatus::class, function (ContainerInterface $c) { return new App\Models\AssetStatus($c->get(PDO::class)); });
$container->set(App\Models\AssetType::class, function (ContainerInterface $c) { return new App\Models\AssetType($c->get(PDO::class)); });
$container->set(App\Models\Contract::class, function (ContainerInterface $c) { return new App\Models\Contract($c->get(PDO::class)); });
$container->set(App\Models\ContractType::class, function (ContainerInterface $c) { return new App\Models\ContractType($c->get(PDO::class)); });
$container->set(App\Models\CustomFieldDefinition::class, function (ContainerInterface $c) { return new App\Models\CustomFieldDefinition($c->get(PDO::class)); });
$container->set(App\Models\CustomFieldValue::class, function (ContainerInterface $c) { return new App\Models\CustomFieldValue($c->get(PDO::class)); });
$container->set(App\Models\Department::class, function (ContainerInterface $c) { return new App\Models\Department($c->get(PDO::class)); });
$container->set(App\Models\FileAttachment::class, function (ContainerInterface $c) { return new App\Models\FileAttachment($c->get(PDO::class)); });
$container->set(App\Models\Language::class, function (ContainerInterface $c) { return new App\Models\Language($c->get(PDO::class)); });
$container->set(App\Models\Location::class, function (ContainerInterface $c) { return new App\Models\Location($c->get(PDO::class)); });
$container->set(App\Models\Manufacturer::class, function (ContainerInterface $c) { return new App\Models\Manufacturer($c->get(PDO::class)); });
$container->set(App\Models\Model::class, function (ContainerInterface $c) { return new App\Models\Model($c->get(PDO::class)); });
$container->set(App\Models\PasswordResetToken::class, function (ContainerInterface $c) { return new App\Models\PasswordResetToken($c->get(PDO::class)); });
$container->set(App\Models\Provider::class, function (ContainerInterface $c) { return new App\Models\Provider($c->get(PDO::class)); });
$container->set(App\Models\Role::class, function (ContainerInterface $c) { return new App\Models\Role($c->get(PDO::class)); });
$container->set(App\Models\Source::class, function (ContainerInterface $c) { return new App\Models\Source($c->get(PDO::class)); });
$container->set(App\Models\User::class, function (ContainerInterface $c) { return new App\Models\User($c->get(PDO::class)); });
$container->set(App\Models\LogActivo::class, function (ContainerInterface $c) { return new App\Models\LogActivo($c->get(PDO::class)); });
$container->set(App\Models\SmtpConfig::class, function (ContainerInterface $c) { return new App\Models\SmtpConfig($c->get(PDO::class)); });


// --- 4. Definiciones de Servicios Más Complejos ---

$container->set(App\Services\AuthService::class, function (ContainerInterface $c) {
    return new App\Services\AuthService(
        $c->get(App\Models\User::class),
        $c->get(App\Models\PasswordResetToken::class),
        $c->get(App\Models\Role::class),
        $c->get(App\Services\SessionService::class),
        $c->get(PHPMailer::class),
        $c->get(Psr\Log\LoggerInterface::class),
        $c->get('config'),
        $c->get(App\Services\LdapService::class),
        $c->get(App\Models\Source::class)
    );
});

$container->set(App\Services\CsvTemplateService::class, function (ContainerInterface $c) {
    return new App\Services\CsvTemplateService(
        $c->get(LoggerInterface::class),
        $c->get('translator'),
        $c->get(App\Models\AssetType::class),
        $c->get(App\Models\CustomFieldDefinition::class)
    );
});

$container->set(App\Services\CsvImporterService::class, function (ContainerInterface $c) {
    return new App\Services\CsvImporterService(
        $c->get(LoggerInterface::class),
        $c->get('translator'),
        $c->get(App\Models\Asset::class),
        $c->get(App\Models\Manufacturer::class),
        $c->get(App\Models\Provider::class),
        $c->get(App\Models\Contract::class),
        $c->get(App\Models\AssetType::class),
        $c->get(App\Models\AssetStatus::class),
        $c->get(App\Models\ContractType::class),
        $c->get(App\Models\Location::class),
        $c->get(App\Models\Department::class),
        $c->get(App\Models\AcquisitionFormat::class),
        $c->get(App\Models\Model::class)
    );
});

$container->set(App\Services\LdapService::class, function (ContainerInterface $c) {
    return new App\Services\LdapService(
        $c->get(LoggerInterface::class),
        $c->get('translator')
    );
});

$container->set(App\Services\LogService::class, function (ContainerInterface $c) {
    return new App\Services\LogService(
        $c->get(PDO::class),
        $c->get(LoggerInterface::class)
    );
});

$container->set(App\Services\MailService::class, function (ContainerInterface $c) {
    return new App\Services\MailService(
        $c->get(PHPMailer::class),
        $c->get(Psr\Log\LoggerInterface::class),
        $c->get(PlatesEngine::class),
        $c->get('config')
    );
});

$container->set(App\Services\NotificationService::class, function (ContainerInterface $c) {
    return new App\Services\NotificationService(
        $c->get(App\Models\Asset::class),
        $c->get(App\Models\Contract::class),
        $c->get(App\Services\MailService::class),
        $c->get(Psr\Log\LoggerInterface::class),
        $c->get('config'),
        $c->get('translator')
    );
});

$container->set(App\Services\SmtpService::class, function (ContainerInterface $c) {
    return new App\Services\SmtpService(
        $c->get('config'),
        $c->get(LoggerInterface::class),
        $c->get('translator'),
        $c->get(PDO::class)
    );
});

// --- 5. Definiciones de Controladores ---
$container->set(App\Controllers\AdminController::class, function (ContainerInterface $c) {
    return new App\Controllers\AdminController(
        $c->get(PlatesEngine::class),
        $c->get(App\Services\SessionService::class),
        $c->get(App\Services\AuthService::class),
        $c->get('config'),
        $c->get('translator')
    );
});

$container->set(App\Controllers\ApiController::class, function (ContainerInterface $c) {
    return new App\Controllers\ApiController(
        $c,
        $c->get(LoggerInterface::class),
        $c->get('translator')
    );
});

$container->set(App\Controllers\AssetController::class, function (ContainerInterface $c) {
    return new App\Controllers\AssetController(
        $c->get(PlatesEngine::class),
        $c->get(App\Services\SessionService::class),
        $c->get('logger'),
        $c->get(App\Models\Asset::class),
        $c->get(App\Models\AssetType::class),
        $c->get(App\Models\Manufacturer::class),
        $c->get(App\Models\Model::class),
        $c->get(App\Models\AssetStatus::class),
        $c->get(App\Models\Location::class),
        $c->get(App\Models\Department::class),
        $c->get(App\Models\AcquisitionFormat::class),
        $c->get(App\Models\Provider::class),
        $c->get('config'),
        $c->get(App\Services\LogService::class),
        $c->get(App\Models\FileAttachment::class),
        $c->get(App\Models\Contract::class),
        $c->get(App\Models\AssetContract::class),
        $c->get(App\Models\CustomFieldDefinition::class),
        $c->get(App\Models\CustomFieldValue::class),
        $c->get('translator')
    );
});

$container->set(App\Controllers\AuthController::class, function (ContainerInterface $c) {
    return new App\Controllers\AuthController(
        $c->get(PlatesEngine::class),
        $c->get('logger'),
        $c->get(App\Services\AuthService::class),
        $c->get(App\Services\SessionService::class),
        $c->get('config'),
        $c->get('translator'),
        $c->get(App\Models\Source::class)
    );
});

$container->set(App\Controllers\ContractController::class, function (ContainerInterface $c) {
    return new App\Controllers\ContractController(
        $c->get(PlatesEngine::class),
        $c->get(App\Services\SessionService::class),
        $c->get('logger'),
        $c->get(App\Models\Contract::class),
        $c->get(App\Models\ContractType::class),
        $c->get(App\Models\Provider::class),
        $c->get('translator')
    );
});

$container->set(App\Controllers\CustomFieldsController::class, function (ContainerInterface $c) {
    return new App\Controllers\CustomFieldsController(
        $c->get(PlatesEngine::class),
        $c->get(App\Services\SessionService::class),
        $c->get('logger'),
        $c->get(App\Models\CustomFieldDefinition::class),
        $c->get(App\Models\AssetType::class),
        $c->get('translator')
    );
});

$container->set(App\Controllers\DashboardController::class, function (ContainerInterface $c) {
    return new App\Controllers\DashboardController(
        $c->get(PlatesEngine::class),
        $c->get(App\Services\SessionService::class),
        $c->get(App\Services\AuthService::class),
        $c->get('config'),
        $c->get('translator'),
        $c->get(App\Models\Asset::class),
        $c->get(App\Models\Contract::class),
        $c->get(App\Models\AssetType::class),
        $c->get(App\Models\AssetStatus::class),
        $c->get(App\Models\ContractType::class)
    );
});

$container->set(App\Controllers\ImportController::class, function (ContainerInterface $c) {
    return new App\Controllers\ImportController(
        $c->get(PlatesEngine::class),
        $c->get(App\Services\SessionService::class),
        $c->get('logger'),
        $c->get(App\Services\CsvTemplateService::class),
        $c->get('translator'),
        $c->get(App\Models\AssetType::class),
        $c->get(App\Services\CsvImporterService::class)
    );
});

$container->set(App\Controllers\LanguageController::class, function (ContainerInterface $c) {
    return new App\Controllers\LanguageController(
        $c->get(App\Services\SessionService::class),
        $c->get('config')
    );
});

$container->set(App\Controllers\LogController::class, function (ContainerInterface $c) {
    return new App\Controllers\LogController(
        $c->get(PlatesEngine::class),
        $c->get(App\Services\SessionService::class),
        $c->get(LoggerInterface::class),
        $c->get(App\Services\LogService::class),
        $c->get('translator')
    );
});

$container->set(App\Controllers\MasterController::class, function (ContainerInterface $c) {
    return new App\Controllers\MasterController(
        $c->get(PlatesEngine::class),
        $c->get(App\Services\SessionService::class),
        $c->get('logger'),
        $c->get(PDO::class),
        $c->get('translator')
    );
});

$container->set(App\Controllers\ModelController::class, function (ContainerInterface $c) {
    return new App\Controllers\ModelController(
        $c->get(PlatesEngine::class),
        $c->get(App\Services\SessionService::class),
        $c->get('logger'),
        $c->get(App\Models\Model::class),
        $c->get(App\Models\Manufacturer::class),
        $c->get('config'),
        $c->get('translator')
    );
});

$container->set(App\Controllers\SmtpController::class, function (ContainerInterface $c) {
    return new App\Controllers\SmtpController(
        $c->get(PlatesEngine::class),
        $c->get(App\Services\SessionService::class),
        $c->get(LoggerInterface::class),
        $c->get('config'),
        $c->get('translator'),
        $c->get(App\Services\SmtpService::class)
    );
});

$container->set(App\Controllers\SourceController::class, function (ContainerInterface $c) {
    return new App\Controllers\SourceController(
        $c->get(PlatesEngine::class),
        $c->get(App\Services\SessionService::class),
        $c->get('logger'),
        $c->get(App\Models\Source::class),
        $c->get('translator'),
        $c->get(App\Services\LdapService::class)
    );
});

$container->set(App\Controllers\UserController::class, function (ContainerInterface $c) {
    return new App\Controllers\UserController(
        $c->get(PlatesEngine::class),
        $c->get(App\Services\SessionService::class),
        $c->get('logger'),
        $c->get(App\Models\User::class),
        $c->get(App\Models\Role::class),
        $c->get('translator'),
        $c->get(App\Models\Source::class)
    );
});
